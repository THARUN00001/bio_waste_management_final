<%- include("partials/header") -%>

<nav class="navbar navbar-expand-lg bg-body-tertiary bg-dark" data-bs-theme="dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">BioWasteTransit</a>
      <img src="https://img.icons8.com/external-flatart-icons-outline-flatarticons/64/null/external-clean-wash-hands-flatart-icons-outline-flatarticons.png"/>
    </div>
  </nav>

<div class="container-fluid">

 <div style="justify-content: center" class="row">

    <div class="col-lg-8">

        <div class="row mt-5 mb-3">
            <h1>
                Treatment Plant registration
            </h1>
        </div>

        <form action="/plantReg" method="post">
         
                <div class="row">
                    <div class="col-lg-4">
                        <div class="input-group mb-3">
                            <!-- <span class="input-group-text">@</span> -->
                            <div class="form-floating">
                                <input name="plantName" type="text" class="form-control"  placeholder="Plant name">
                                <label  class="form-label">Plant Name</label>
                            </div>
                          </div>
                    </div>
                </div>
             
        <div class="row">
        
            <div class="col-lg-4">
                <div class="input-group mb-3">
                    <span class="input-group-text"><img src="https://img.icons8.com/external-tanah-basah-glyph-tanah-basah/24/null/external-user-user-tanah-basah-glyph-tanah-basah-4.png"/></span>
                    <div class="form-floating">
                      <input name="username" type="text" class="form-control"  placeholder="Username">
                      <label>Username</label>
                    </div>
                  </div>
            </div>
            
            <div class="col-lg-4 mb-3">
                <div class="input-group mb-3">
                    <span class="input-group-text"> <img src="https://img.icons8.com/material-rounded/24/null/visible.png"/> <input  type="checkbox" onclick="myFunction()"> </span>
                    <div class="form-floating">
                <input name="password" id="password" type="password" class="form-control"  placeholder="Password">
                <label  class="form-label">Password</label>
            </div> 
                </div>
            </div>
              
        </div>

        <div class="row">

            <div class="col-lg-4">
                <div class="input-group mb-3">
                    <span class="input-group-text"><img src="https://img.icons8.com/material-rounded/24/null/mail.png"/></span>
                    <div class="form-floating">
                      <input name="email" type="email" class="form-control" id="floatingInputGroup1" placeholder="xxxxx@gmail.com">
                      <label for="floatingInputGroup1">EMail ID</label>
                    </div>

                  </div>
            </div>

            <div class="col-lg-4">
                <div class="input-group mb-3">
                    <span class="input-group-text">+91</span>
                    <div class="form-floating">
                      <input name="phoneno" type="text" class="form-control" id="floatingInputGroup1" placeholder="xxxxx xxxxx">
                      <label for="floatingInputGroup1">Phone number</label>
                      <input name="role" style="display: none;" value="Plant" class="form-control">    
                    </div>
                  </div>
            </div>
            <div class="col-lg-4">
              <div class="input-group mb-3">
                  <span class="input-group-text"><img src="https://img.icons8.com/ios/24/null/map-marker--v1.png"/></span>
                  <div class="form-floating">
                    <input id="pac-input" class="input-group-text form-control" type="text" name="plantAddress" placeholder="Drop"></div>  
                    <input type="text" id="plantCords" style="display: none;" name="plantCords" class="input-group-text"  value= "">
      
                  </div>
                  <div id="infowindow-content">
                    <span id="place-name" class="title"></span><br/>
                    <span id="place-address"></span>
                  </div>   
                      <div id="map"></div>
                      <div id="pac-container">
                    
                    </div> 
                </div>
                <div class="col-lg-3">
                  <button class="btn btn-success" type="submit">Register</button> 
                </div>
          </div>
        </div>
        
      
         </form>
    </div>

    </div>



</div>


<script>
      function myFunction() {
  var x = document.getElementById("password");
  if (x.type === "password") {
    x.type = "text";
  } else {
    x.type = "password";
  }
}
</script>

<script>


function initMap() {
  const map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: 12.975766, lng: 77.570869 },
    zoom: 13,
    mapTypeControl: false,
  });
  const card = document.getElementById("pac-card");
  const input = document.getElementById("pac-input");
  const input1 = document.getElementById("pac-input1");
  const biasInputElement = document.getElementById("use-location-bias");
  const strictBoundsInputElement = document.getElementById("use-strict-bounds");
  const options = {
    fields: ["formatted_address", "geometry", "name"],
    strictBounds: false,
    types: ["establishment"],
  };

  map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

  const autocomplete = new google.maps.places.Autocomplete(input, options);
  const autocomplete1 = new google.maps.places.Autocomplete(input1, options);

  // Bind the map's bounds (viewport) property to the autocomplete object,
  // so that the autocomplete requests use the current map bounds for the
  // bounds option in the request.
  autocomplete.bindTo("bounds", map);
  autocomplete1.bindTo("bounds", map);


  const infowindow = new google.maps.InfoWindow();
  const infowindowContent = document.getElementById("infowindow-content");

  infowindow.setContent(infowindowContent);

  const marker = new google.maps.Marker({
    map,
    anchorPoint: new google.maps.Point(0, -29),
  });

  

  autocomplete.addListener("place_changed", () => {
    infowindow.close();
    marker.setVisible(false);

    const place = autocomplete.getPlace();

    if (!place.geometry || !place.geometry.location) {
      // User entered the name of a Place that was not suggested and
      // pressed the Enter key, or the Place Details request failed.
      window.alert("No details available for input: '" + place.name + "'");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
        console.log(place);
      map.fitBounds(place.geometry.viewport);
      const pLat = place.geometry.location.lat();
      const pLng = place.geometry.location.lng();
      const Pll = pLat + "," + pLng;
      document.getElementById("plantCords").value =  Pll  ;
      console.log(Pll);
   
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);
      
    }

    marker.setPosition(place.geometry.location);
    marker.setVisible(true);
    infowindowContent.children["place-name"].textContent = place.name;
    infowindowContent.children["place-address"].textContent =
    place.name;
    infowindow.open(map, marker);
  });

  autocomplete1.addListener("place_changed", () => {
    infowindow.close();
    marker.setVisible(false);

    const place = autocomplete1.getPlace();

    if (!place.geometry || !place.geometry.location) {
      // User entered the name of a Place that was not suggested and
      // pressed the Enter key, or the Place Details request failed.
      window.alert("No details available for input: '" + place.name + "'");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
        console.log(place);
      map.fitBounds(place.geometry.viewport);
      const dLat = place.geometry.location.lat();
      const dLng = place.geometry.location.lng();
      const Dll = dLat + "," + dLng;
      document.getElementById("dropLatLng").value =  Dll  ;
      console.log(Dll);
  
    } else {
      map.setCenter(place.geometry.location);

      map.setZoom(17);
    }

    marker.setPosition(place.geometry.location);
    marker.setVisible(true);
    infowindowContent.children["place-name"].textContent = place.name;
    infowindowContent.children["place-address"].textContent =
      place.formatted_address;
    infowindow.open(map, marker);
  });

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, types) {
    const radioButton = document.getElementById(id);

    radioButton.addEventListener("click", () => {
      autocomplete.setTypes(types);

    });
  }
  function setupClickListener(id, types) {
    const radioButton = document.getElementById(id);

    radioButton.addEventListener("click", () => {
      autocomplete.setTypes(types);
      input1.value = "";
    });
  }



  function setupClickListener(id, types) {
    const radioButton = document.getElementById(id);

    radioButton.addEventListener("click", () => {
      autocomplete1.setTypes(types);
      input.value = "";
  
    });
  }
  function setupClickListener(id, types) {
    const radioButton = document.getElementById(id);

    radioButton.addEventListener("click", () => {
      autocomplete1.setTypes(types);
      input1.value = "";
    });
  }


  setupClickListener("changetype-all", []);
  setupClickListener("changetype-address", ["address"]);
  setupClickListener("changetype-establishment", ["establishment"]);
  setupClickListener("changetype-geocode", ["geocode"]);
  setupClickListener("changetype-cities", ["(cities)"]);
  setupClickListener("changetype-regions", ["(regions)"]);
  biasInputElement.addEventListener("change", () => {
    if (biasInputElement.checked) {
      autocomplete.bindTo("bounds", map);
    } else {
      // User wants to turn off location bias, so three things need to happen:
      // 1. Unbind from map
      // 2. Reset the bounds to whole world
      // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
      autocomplete.unbind("bounds");
      autocomplete.setBounds({ east: 180, west: -180, north: 90, south: -90 });
      strictBoundsInputElement.checked = biasInputElement.checked;
    }

    input.value = "";

  });

    biasInputElement.addEventListener("change", () => {
    if (biasInputElement.checked) {
      autocomplete1.bindTo("bounds", map);
    } else {
      // User wants to turn off location bias, so three things need to happen:
      // 1. Unbind from map
      // 2. Reset the bounds to whole world
      // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
      autocomplete1.unbind("bounds");
      autocomplete1.setBounds({ east: 180, west: -180, north: 90, south: -90 });
      strictBoundsInputElement.checked = biasInputElement.checked;
    }

    input.value = "";
 
  });


  strictBoundsInputElement.addEventListener("change", () => {
    autocomplete.setOptions({
      strictBounds: strictBoundsInputElement.checked,
    });
    if (strictBoundsInputElement.checked) {
      biasInputElement.checked = strictBoundsInputElement.checked;
      autocomplete.bindTo("bounds", map);
    }

    input.value = "";

  });


  strictBoundsInputElement.addEventListener("change", () => {
    autocomplete1.setOptions({
      strictBounds: strictBoundsInputElement.checked,
    });
    if (strictBoundsInputElement.checked) {
      biasInputElement.checked = strictBoundsInputElement.checked;
      autocomplete1.bindTo("bounds", map);
    }

  
    input1.value = "";
  });
}

window.initMap = initMap;


</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDSX3jhBJVmlod62B-joxdetnWt-_yBnLM&callback=initMap&libraries=places&v=weekly"></script>
<%- include("partials/footer") -%>